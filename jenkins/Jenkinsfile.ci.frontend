pipeline {
  agent any
  environment {
    REGISTRY = "975050024946.dkr.ecr.ca-central-1.amazonaws.com/shopnow-aviral/frontend:latest"
    DOCKER_CREDENTIALS = 'docker-reg-cred'    // Jenkins username/password credential id
    IMAGE_TAG = ''
  }
  stages {
    stage('Checkout') {
      steps { checkout scm }
    }
    stage('Set Image Tag') {
      steps {
        script {
          GIT_SHORT = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
          IMAGE_TAG = "${GIT_SHORT}"
          echo "Image tag: ${IMAGE_TAG}"
        }
      }
    }
    stage('Build & Push Image') {
      steps {
        dir('frontend') {
          withCredentials([usernamePassword(credentialsId: DOCKER_CREDENTIALS, usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
            sh '''
              echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin your.registry.example.com
              docker build -t ${REGISTRY}-frontend:${IMAGE_TAG} .
              docker push ${REGISTRY}-frontend:${IMAGE_TAG}
            '''
          }
        }
      }
    }
    stage('Publish Artifact (image tag)') {
      steps {
        writeFile file: 'image-tag.txt', text: "${IMAGE_TAG}"
        archiveArtifacts artifacts: 'image-tag.txt', fingerprint: true
      }
    }
    stage('Optional: Trigger CD') {
      when { expression { return env.TRIGGER_CD == 'true' } }
      steps {
        // Optional: trigger the CD job; set TRIGGER_CD=true in job parameters to enable
        script {
          // Replace 'job/shopnow-frontend-cd' with your actual Jenkins CD job path
          def cdJob = 'shopnow-frontend-cd'
          build job: cdJob, parameters: [string(name: 'IMAGE_TAG', value: IMAGE_TAG)], wait: false
        }
      }
    }
  }
  post {
    always { cleanWs() }
  }
}

